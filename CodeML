Q1
# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

data = pd.read_csv("/content/salary_data.csv")
X = data[['YearsExperience']].values  # Independent variable (employee level)
y = data['Salary'].values  # Dependent variable (salary)

# Fit the simple linear regression model
model = LinearRegression()
model.fit(X, y)

# Predict salaries for level 11 and level 12 employees
levels_to_predict = np.array([[11], [12]])
predictions = model.predict(levels_to_predict)

print("Predicted Salaries:")
for level, salary in zip([11, 12], predictions):
    print(f"Level {level}: ${salary:.2f}")


Q2
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
data = pd.read_csv("weather.csv")

# Drop rows with missing values for simplicity
data.dropna(inplace=True)

# Select feature columns (X) and the target column (y)
X = data.drop(columns=['RainTomorrow'])  # Independent variables
y = data['RainTomorrow']  # Dependent variable (target)

# Convert categorical features to numerical using one-hot encoding
X = pd.get_dummies(X, columns=['WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday'])

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Naive Bayes model
model = GaussianNB()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print("Accuracy:", accuracy)
print("Classification Report:\n", report)
